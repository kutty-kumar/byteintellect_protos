PROJECT_ROOT            ?= $(PWD)
BUILD_PATH              ?= bin

# configuration for image names
USERNAME                ?= $(USER)
GIT_COMMIT              ?= $(shell git describe --dirty=-unsupported --always --tags || echo pre-commit)
IMAGE_VERSION           ?= $(GIT_COMMIT)-$(USERNAME)

# configuration for server binary and image
SERVER_BINARY           ?= $(BUILD_PATH)/server
SERVER_PATH             ?= $(PROJECT_ROOT)/cmd/server
SERVER_DOCKERFILE       ?= $(DOCKERFILE_PATH)/Dockerfile

# configuration for the protobuf gentool
SRCROOT_ON_HOST         ?= $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))
SRCROOT_IN_CONTAINER    ?= /go/src/$(PROJECT_ROOT)
DOCKER_RUNNER           ?= docker run -u `id -u`:`id -g` --rm -v $(SRCROOT_ON_HOST):$(SRCROOT_IN_CONTAINER)
DOCKER_GENERATOR        ?= infoblox/atlas-gentool:latest
GENERATOR               ?= $(DOCKER_RUNNER) $(DOCKER_GENERATOR)

# configuration for building on host machine
GO_CACHE                ?= -pkgdir $(BUILD_PATH)/go-cache
GO_BUILD_FLAGS          ?= $(GO_CACHE) -i -v
GO_TEST_FLAGS           ?= -v -cover
GO_PACKAGES             ?= $(shell go list ./... | grep -v vendor)


PROTOBUF_ARGS =  -I=$(PROJECT_ROOT)/vendor
PROTOBUF_ARGS += --go_out=plugins=grpc,paths=source_relative:.
PROTOBUF_ARGS += --validate_out="lang=go:."
PROTOBUF_ARGS += --proto_path=$(PROJECT_ROOT)/pkg
WITH_DATABASE ?= false
WITH_GATEWAY  ?= true

ifeq ($(WITH_GATEWAY), true)
PROTOBUF_ARGS += --grpc-gateway_out="logtostderr=true,allow_delete_body=true,paths=source_relative:."
PROTOBUF_ARGS += --swagger_out="atlas_patch=true,allow_delete_body=true:."
else ifeq ($(WITH_EXPAND), true)
PROTOBUF_ARGS += --grpc-gateway_out=logtostderr=true:.
endif

GO_MOD = go.mod

.PHONY protobuf: protobuf-atlas
protobuf-atlas:
	@$(GENERATOR) \
    $(PROTOBUF_ARGS) \
    $(PROJECT_ROOT)/pkg/core_v1/core.proto
	@$(GENERATOR) \
    $(PROTOBUF_ARGS) \
    $(PROJECT_ROOT)/pkg/users_v1/users.proto